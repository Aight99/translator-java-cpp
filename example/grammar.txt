
<program> -> <public> <class> <main> <lbracket_curly> <main_func> <rbracket_curly> | <public> <class> <main> <lbracket_curly> <rbracket_curly>
<main_func> -> <public> <static> <void> <main> <lbracket> <String[]args> <rbracket> <lbracket_curly> <code_block> <rbracket_curly> | <public> <static> <void> <main> <lbracket> <String[]args> <rbracket> <lbracket_curly> <rbracket_curly>
<main_func> -> <public> <static> <void> <main> <lbracket> <rbracket> <lbracket_curly> <code_block> <rbracket_curly> | <public> <static> <void> <main> <lbracket> <rbracket> <lbracket_curly> <rbracket_curly>

<id> -> id
<number_int> -> number_int
<number_float> -> number_float
<lbracket> -> lbracket
<rbracket> -> rbracket
<lbracket_square> -> lbracket_square
<rbracket_square> -> rbracket_square
<lbracket_curly> -> lbracket_curly
<rbracket_curly> -> rbracket_curly
<semicolon> -> semicolon
<comma> -> comma
<dot> -> dot
<quote> -> quote
<double_quote> -> double_quote
<type_hint> -> type_hint
<compare> -> compare
<math_operator> -> math_operator
<boolean_operator> -> boolean_operator
<boolean_not> -> boolean_not
<assign> -> assign
<op_assign> -> op_assign
<boolean_value> -> boolean_value
<if> -> if
<else> -> else
<for> -> for
<while> -> while
<do> -> do
<max> -> max
<min> -> min
<static> -> static
<class> -> class
<public> -> public
<print> -> print
<main> -> main
<void> -> void

<String[]args> -> String[]args ADD SOMETHING LIKE THIS PLEASE NATASHA !!!!!!!!!!!!!!!!!!!!!!
<symbol_value> -> NATASHA ADD CHAR
<return> -> NATASHA AAA AAA AAA

<code_block> -> <instruction> <code_block> | <instruction>
<instruction> -> <assignment> <semicolon> | <variable_declaration> <semicolon> | <func_call> <semicolon> | <expression> <semicolon> | <loop> | <condition> | <func_return> <semicolon>
<assignment> -> <id> <assign> <expression>
<expression> -> <logical_expression> | <math_expression> | <symbol_value> | <id> | <func_call>
<logical_expression> -> <math_expression> <compare> <math_expression> | <symbol_value> <compare> <symbol_value> | <boolean_value> | <logical_expression> <boolean_operator> <logical_expression> | <logical_expression> <boolean_operator> <logical_expression> | <lbracket> <logical_expression> <rbracket> | <boolean_not> <logical_expression>
<math_expression> -> <math_expression> <addition_sign> <math_expression> | <math_expression> <multiplication_sign> <math_expression> | <number> | <id> | <lbracket> <math_expression> <rbracket> | -<math_expression> | <func_call>
<number> -> <number_int> | <number_float>
<condition> -> <if> <lbracket> <logical_expression> <rbracket> <lbracket_curly> <code_block> <rbracket_curly> | <if> <lbracket> <logical_expression> <rbracket> <lbracket_curly> <code_block> <rbracket_curly> <else> <lbracket_curly> <code_block> <rbracket_curly> | <if> <lbracket> <logical_expression> <rbracket> <lbracket_curly> <code_block> <rbracket_curly> <else> <condition> | <if> <lbracket> <logical_expression> <rbracket> <lbracket_curly>  <rbracket_curly> | <if> <lbracket> <logical_expression> <rbracket> <lbracket_curly>  <rbracket_curly> <else> <lbracket_curly> <code_block> <rbracket_curly> | <if> <lbracket> <logical_expression> <rbracket> <lbracket_curly> <code_block> <rbracket_curly> <else> <lbracket_curly>  <rbracket_curly> | <if> <lbracket> <logical_expression> <rbracket> <lbracket_curly>  <rbracket_curly> <else> <lbracket_curly>  <rbracket_curly> | <if> <lbracket> <logical_expression> <rbracket> <lbracket_curly>  <rbracket_curly> <else> <condition>
<func_call> -> <id> <lbracket> <func_call_params>  <rbracket> | <id> <lbracket> <rbracket> | <print> <lbracket> <func_call_params> <rbracket> | <max> <lbracket> <func_call_params> <rbracket> | <min> <lbracket> <func_call_params> <rbracket>
<func_declaration> -> <static> <func_return_type> <id> <lbracket> <function_params> <rbracket> <lbracket_curly> <code_block> <rbracket_curly> <func_declaration> | <static> <func_return_type> <id> <lbracket> <function_params> <rbracket> <lbracket_curly> <code_block> <rbracket_curly> | <static> <func_return_type> <id> <lbracket> <function_params> <rbracket> <lbracket_curly>  <rbracket_curly> <func_declaration> | <static> <func_return_type> <id> <lbracket> <function_params> <rbracket> <lbracket_curly>  <rbracket_curly> | <static> <func_return_type> <id> <lbracket>  <rbracket> <lbracket_curly> <code_block> <rbracket_curly> <func_declaration> | <static> <func_return_type> <id> <lbracket>  <rbracket> <lbracket_curly> <code_block> <rbracket_curly> | <static> <func_return_type> <id> <lbracket>  <rbracket> <lbracket_curly>  <rbracket_curly> <func_declaration> | <static> <func_return_type> <id> <lbracket>  <rbracket> <lbracket_curly>  <rbracket_curly>
<func_return_type> -> <type_hint> | <void>
<function_params> -> <type_hint> <id> | <type_hint> <id>, <function_params>
<code_block> -> <code_block>
<func_return> -> <return> <expression>
<variable_declaration> -> <type_hint> <id> | <type_hint> <id> <assign> <expression>
<func_call_params> -> <expression> | <expression>, <func_call_params>
<loop> -> <while> <lbracket> <logical_expression> <rbracket> <lbracket_curly> <code_block> <rbracket_curly> | <do> <lbracket_curly> <code_block> <rbracket_curly> <while> <lbracket> <logical_expression> <rbracket> <semicolon> | <for> <lbracket> <variable_declaration> <semicolon> <logical_expression> <semicolon> <assignment> <rbracket> <lbracket_curly> <code_block> <rbracket_curly> | <for> <lbracket> <assignment> <semicolon> <logical_expression> <semicolon> <assignment> <rbracket> <lbracket_curly> <code_block> <rbracket_curly> | <while> <lbracket> <logical_expression> <rbracket> <lbracket_curly> <rbracket_curly> | <do> <lbracket_curly>  <rbracket_curly> <while> <lbracket> <logical_expression> <rbracket> <semicolon> | <for> <lbracket> <variable_declaration> <semicolon> <logical_expression> <semicolon> <assignment> <rbracket> <lbracket_curly> <rbracket_curly> | <for> <lbracket> <assignment> <semicolon> <logical_expression> <semicolon> <assignment> <rbracket> <lbracket_curly> <rbracket_curly>